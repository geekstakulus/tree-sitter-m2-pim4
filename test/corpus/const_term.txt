====
Const Factor Multiply Const Factor 
====

MODULE BasicConst;
  CONST MyConst = 123 * Ident ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))
                  (mult_operator
                    (opTimes))
                  (const_factor
                    (qualident
                      qualifier_or_id: (ident)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Const Factor Divide Const Factor 
====

MODULE BasicConst;
  CONST MyConst = 123 / Ident ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))
                  (mult_operator
                    (opDivide))
                  (const_factor
                    (qualident
                      qualifier_or_id: (ident)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Const Factor DIV Const Factor 
====

MODULE BasicConst;
  CONST MyConst = 123 DIV Ident ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))
                  (mult_operator
                    (kDiv))
                  (const_factor
                    (qualident
                      qualifier_or_id: (ident)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Const Factor MOD Const Factor 
====

MODULE BasicConst;
  CONST MyConst = 123 MOD Ident ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))
                  (mult_operator
                    (kMod))
                  (const_factor
                    (qualident
                      qualifier_or_id: (ident)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Const Factor AND Const Factor 
====

MODULE BasicConst;
  CONST MyConst = 123 AND Ident ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))
                  (mult_operator
                    (kAnd))
                  (const_factor
                    (qualident
                      qualifier_or_id: (ident)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Const Factor & Const Factor 
====

MODULE BasicConst;
  CONST MyConst = 123 & Ident ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))
                  (mult_operator
                    (opAnd))
                  (const_factor
                    (qualident
                      qualifier_or_id: (ident)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))
