====
Empty Const Declaration
====

MODULE BasicConst;
  CONST
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Integer Const Declaration
====

MODULE BasicConst;
  CONST MyConst = 123 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Octal Integer Const Declaration
====

MODULE BasicConst;
  CONST MyConst = 123B ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Character Integer Const Declaration
====

MODULE BasicConst;
  CONST MyConst = 123C ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Double Integer Const Declaration
====

MODULE BasicConst;
  CONST MyConst = 2345123D ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Hexadecimal Integer Const Declaration
====

MODULE BasicConst;
  CONST MyConst = 0AFH ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (integer)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration
====

MODULE BasicConst;
  CONST MyConst = 123.23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration Without Decimal
====

MODULE BasicConst;
  CONST MyConst = 123. ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration With Scale Factor
====

MODULE BasicConst;
  CONST MyConst = 123.23E23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration With Scale Factor No Decimal
====

MODULE BasicConst;
  CONST MyConst = 123.E23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration With Scale Factor Positive
====

MODULE BasicConst;
  CONST MyConst = 123.E+23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration With Scale Factor Negative
====

MODULE BasicConst;
  CONST MyConst = 123.E-23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration With Decimal and Scale Factor Positive
====

MODULE BasicConst;
  CONST MyConst = 123.12E+23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident Real Const Declaration With Decimal and Scale Factor Negative
====

MODULE BasicConst;
  CONST MyConst = 123.98E-23 ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (number
                      (real)))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident String Const Declaration Single Quotes
====

MODULE BasicConst;
  CONST MyConst = 'Hello, World' ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (string))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
Single Ident String Const Declaration Double Quotes
====

MODULE BasicConst;
  CONST MyConst = "Hello, World" ;
END BasicConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (string))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))
