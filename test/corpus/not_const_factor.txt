====
NOT Parenthetical Multiply Const Factor Expression
====

MODULE ParenConst;
  CONST MyConst = NOT (123 = Ident) ;
END ParenConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (kNot)
                    (const_factor
                      paren_expr: (const_expression
                        (simple_const_expr
                          (const_term
                            (const_factor
                              (number
                                (integer)))))
                        (relation
                          (opEqual))
                        (simple_const_expr
                          (const_term
                            (const_factor
                              (qualident
                                qualifier_or_id: (ident))))))))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

====
NOT Ident
====

MODULE ParenConst;
  CONST MyConst = NOT Ident ;
END ParenConst.

----

(compilation_unit
  (program_module
    (program_module_header
      (kModule)
      modulename: (ident))
    (block
      (declaration
        (const_declaration
          (kConst)
          (constant_declaration
            const_id: (ident)
            (const_expression
              (simple_const_expr
                (const_term
                  (const_factor
                    (kNot)
                    (const_factor
                      (qualident
                        qualifier_or_id: (ident))))))))))
      (kEnd))
    (module_footer
      modulename: (ident))))

